<?php
/**
 * Htmlbox Element
 *
 * Please do not edit this file. This file is part of the CyberChimps Framework and all modifications
 * should be made in a child theme.
 *
 * @category CyberChimps Framework
 * @package  Framework
 * @since    1.0
 * @author   CyberChimps
 * @license  http://www.opensource.org/licenses/gpl-license.php GPL v3.0 (or later)
 * @link     http://www.cyberchimps.com/
 */
// Don't load directly
if ( ! defined( 'ABSPATH' ) ) {
	die( '-1' );
}

if ( ! class_exists( 'CyberChimpsHTMLbox' ) ) {

	class CyberChimpsHTMLbox {

		protected static $instance;
		public $options;

		/* Static Singleton Factory Method */

		public static function instance() {
			if ( ! isset( self::$instance ) ) {
				$className = __CLASS__;
				self::$instance = new $className;
			}

			return self::$instance;
		}

		/**
		 * Initializes plugin variables and sets up WordPress hooks/actions.
		 *
		 * @return void
		 */
		protected function __construct() {
			add_action( 'html_box', array( $this, 'render_display' ) );
			add_action( 'init', array( $this, 'meta_box' ) );

			$this->options = get_option( 'cyberchimps_options' );
		}

		public function render_display() {
			global $post, $allowedposttags;

			if ( is_page() ) {
				$content = ( get_post_meta( $post->ID, 'html_box', true ) ) ? do_shortcode( get_post_meta( $post->ID, 'html_box', true ) ) : '';
			} else {
				$content = ( $this->options[ 'html_box' ] ) ? do_shortcode( $this->options[ 'html_box' ] ) : '';
			}
			//  $size=$boxes_per_row  = get_post_meta( get_the_ID(), 'boxes_per_row', true );
			$size = ! empty( $this->options[ 'boxes_size' ] ) ? do_shortcode( $this->options[ 'boxes_size' ] ) : '';
			$col = '';
			switch ( $size ) {
				case '2':
					$col = 'col-md-3';
					break;
				case '3':
					$col = 'col-md-6';
					break;
				case '4':
					$col = 'col-md-9';
					break;
				default:
					$col = 'col-md-12';
					break;
			}

			if ( $content != '' ):
				?>
				<div id="htmlbox_container" class="row">
					<div id="htmlbox" class="<?php echo $col; ?>">
						<div class="htmlbox-content">
				<?php echo $content; ?>
						</div>
					</div>
				</div>
			<?php
			endif;
		}

		/**
		 * Create meta boxes on page
		 */
		public function meta_box() {
			$page_fields = array(
				array(
					'type' => 'editor',
					'id' => 'html_box',
					'class' => '',
					'name' => __( 'Custom HTML', 'cyberchimps_elements' ),
					'desc' => __( 'Enter your custom html here', 'cyberchimps_elements' ),
					'settings' => array( 'media_buttons' => true )
				),
				array(
					'type' => 'select',
					'id' => 'boxes_size',
					'class' => '',
					'name' => __( 'Set Size', 'cyberchimps_core' ),
					'options' => array( 2 => '25%', 3 => '50%', 4 => '75%', 5 => '100%' ),
					'std' => '5'
				)
			);
			/*
			 * configure your meta box
			 */
			$page_config = array(
				'id' => 'html_box_options', // meta box id, unique per meta box
				'title' => __( 'HTML Box Options', 'cyberchimps_elements' ), // meta box title
				'pages' => array( 'page' ), // post types, accept custom post types as well, default is array('post'); optional
				'context' => 'normal', // where the meta box appear: normal (default), advanced, side; optional
				'priority' => 'high', // order of meta box: high (default), low; optional
				'fields' => apply_filters( 'cyberchimps_html_box_metabox_fields', $page_fields, 'html_box' ), // list of meta fields (can be added by field arrays)
				'local_images' => false, // Use local or hosted images (meta box images for add/remove)
				'use_with_theme' => true //change path if used with theme set to true, false for a plugin or anything else for a custom path(default false).
			);

			/*
			 * Initiate your meta box
			 */
			$page_meta = new Cyberchimps_Meta_Box( $page_config );
		}

	}

}
CyberChimpsHTMLbox::instance();
